{
  "{\"sourceRoot\":\"/home/pandahome/Becode/test_p_1/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/pandahome/Becode/test_p_1\",\"filename\":\"/home/pandahome/Becode/test_p_1/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/pandahome/Becode/test_p_1\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.7": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/pandahome/Becode/test_p_1/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/pandahome/Becode/test_p_1",
      "filename": "/home/pandahome/Becode/test_p_1/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/pandahome/Becode/test_p_1",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/pandahome/Becode/test_p_1/src/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/pandahome/Becode/test_p_1/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/pandahome/Becode/test_p_1/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"dotenv/config\");\n\nvar _page_ = _interopRequireDefault(require(\"./page_1.js\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _apolloServerExpress = require(\"apollo-server-express\");\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  type Query {\\n    users: [User!]\\n    me: User\\n    user(id : ID!) : User\\n\\n    messages: [Message!]!\\n    message(id: ID!): Message!\\n  }\\n  type User {\\n    username: String!\\n    id :ID!\\n  }\\n  type Message{\\n    id: ID!\\n    text: String!\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n//1 . On affcihe dans la console une valeur stockée dans le .env\nconsole.log(process.env.MY_SECRET); // On appelle notre fonction (\"concole log depuis le fichier page 1\")\n\nvar msg = require(\"./page_1.js\"); // On lance le serveur express en l'initalisant dans une constante\n\n\nvar app = (0, _express[\"default\"])(); // On construit ici le schema de notre \"base de donnée\"\n//Le schema est un liste de definitions de type. On commence par le type Query puis on remplis les differents champs(User,Message) de la DB\n//gql´...` est le format GraphQl de DB\n//Pour le premier \"users : [User!]\" On cree un type users que tous les users possede par defaut et qui est obligatoire\n//Pour le second \"me :User\" On definis un objet me de typer User. Dans ce ca il a le \"scalar type(champ classique)\" username(string) et id(ID)\n//'!' veut dire que ces champs ne peuvent pas etre null \n// Message \n\nvar schema = (0, _apolloServerExpress.gql)(_templateObject()); //User est une table qui est composée des champ Id et usernam\n\nvar _users = {\n  1: {\n    id: '1',\n    username: 'Robin Wieruch'\n  },\n  2: {\n    id: '2',\n    username: 'Dave Davids'\n  }\n}; //message est une table qui est composée des champ Id et usernam\n\nvar _messages = {\n  1: {\n    id: '1',\n    text: 'Hello World'\n  },\n  2: {\n    id: '2',\n    text: 'By World'\n  }\n}; // On defenis une variable \"me\" qui prend comme champ le premier user comme champ\n//const me = users[1]; Plus besoin de l'utiliser car il est init dans l'argument contexte(3eme argument) de Apollo serveur \n// Le resolvers permet d'aller chercher les donnée dans la DB c'est ici que tous les query devront etre effectuée\n\nvar resolvers = {\n  Query: {\n    // On renvoie l'ensemble des donnée de la table users \n    users: function users() {\n      return Object.values(_users);\n    },\n    // On renvoie toutes les données de 'me'\n    // Le 3 eme 'me' argument viens de context.\n    me: function me(parent, args, _ref) {\n      var _me = _ref.me;\n      return _me;\n    },\n    //On renvoie les donnée d'un user ciblé en fonction de son ID\n    user: function user(parent, _ref2) {\n      var id = _ref2.id;\n      return _users[id];\n    },\n    //On renvoie l'ensemble des donnée de la table message\n    messages: function messages() {\n      return Object.values(_messages);\n    },\n    //On renvoie les donnée d'un message ciblé en fonction de son ID\n    message: function message(parent, _ref3) {\n      var id = _ref3.id;\n      return _messages[id];\n    }\n  } // Ici on impose a tous les usernames la valeur 'Hans'\n  // User: {\n  //     username: () => 'Hans',\n  // },\n  //Ici on renvoie le parent de username lorsque l'on demande le username(redondant)\n  // User: {\n  //   username: parent => {\n  //     return parent.username;\n  //   }\n  // }\n  //On definis ici a username un nom et prenom\n  // User: {\n  //   username: user => `${user.firstname} ${user.lastname}`,\n  // },\n\n}; //On lance le serveur Apollo\n\nvar server = new _apolloServerExpress.ApolloServer({\n  // Definitions des types -> schema et requete faite avec resolvers\n  typeDefs: schema,\n  resolvers: resolvers,\n  context: {\n    me: _users[1]\n  }\n}); //On utilise ici 'applyMiddleware' pour lancer express avec le serveur appollo pour lancer Graphql playground\n//On lance dans le navigateur localhost:8000/graphql pour acceder a la page de graphql playground\n\nserver.applyMiddleware({\n  app: app,\n  path: '/graphql'\n}); //On lance notre page sur le port 8000\n\napp.listen({\n  port: 8000\n}, function () {\n  //Message d'affichage lorsque le serveur est en ligne\n  console.log('Apollo Server on http://localhost:8000/graphql');\n}); //Lancement de cors\n\napp.use((0, _cors[\"default\"])());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiTVlfU0VDUkVUIiwibXNnIiwicmVxdWlyZSIsImFwcCIsInNjaGVtYSIsImdxbCIsInVzZXJzIiwiaWQiLCJ1c2VybmFtZSIsIm1lc3NhZ2VzIiwidGV4dCIsInJlc29sdmVycyIsIlF1ZXJ5IiwiT2JqZWN0IiwidmFsdWVzIiwibWUiLCJwYXJlbnQiLCJhcmdzIiwidXNlciIsIm1lc3NhZ2UiLCJzZXJ2ZXIiLCJBcG9sbG9TZXJ2ZXIiLCJ0eXBlRGVmcyIsImNvbnRleHQiLCJhcHBseU1pZGRsZXdhcmUiLCJwYXRoIiwibGlzdGVuIiwicG9ydCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0FBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBeEIsRSxDQUNBOztBQUNBLElBQUlDLEdBQUcsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBakIsQyxDQUlBOzs7QUFDQSxJQUFNQyxHQUFHLEdBQUcsMEJBQVosQyxDQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQU1DLE1BQU0sT0FBR0Msd0JBQUgsb0JBQVosQyxDQWtCQTs7QUFDQSxJQUFJQyxNQUFLLEdBQUc7QUFDVixLQUFHO0FBQ0RDLElBQUFBLEVBQUUsRUFBRSxHQURIO0FBRURDLElBQUFBLFFBQVEsRUFBRTtBQUZULEdBRE87QUFLVixLQUFHO0FBQ0RELElBQUFBLEVBQUUsRUFBRSxHQURIO0FBRURDLElBQUFBLFFBQVEsRUFBRTtBQUZUO0FBTE8sQ0FBWixDLENBVUE7O0FBQ0EsSUFBSUMsU0FBUSxHQUFHO0FBQ2IsS0FBRztBQUNERixJQUFBQSxFQUFFLEVBQUUsR0FESDtBQUVERyxJQUFBQSxJQUFJLEVBQUU7QUFGTCxHQURVO0FBS2IsS0FBRztBQUNESCxJQUFBQSxFQUFFLEVBQUUsR0FESDtBQUVERyxJQUFBQSxJQUFJLEVBQUU7QUFGTDtBQUxVLENBQWYsQyxDQVVBO0FBQ0E7QUFDQTs7QUFDQSxJQUFNQyxTQUFTLEdBQUc7QUFFaEJDLEVBQUFBLEtBQUssRUFBRTtBQUNMO0FBQ0FOLElBQUFBLEtBQUssRUFBRSxpQkFBTTtBQUNYLGFBQU9PLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUixNQUFkLENBQVA7QUFDRCxLQUpJO0FBS0w7QUFDQTtBQUNBUyxJQUFBQSxFQUFFLEVBQUUsWUFBQ0MsTUFBRCxFQUFTQyxJQUFULFFBQTBCO0FBQUEsVUFBVEYsR0FBUyxRQUFUQSxFQUFTO0FBQzVCLGFBQU9BLEdBQVA7QUFDRCxLQVRJO0FBVUw7QUFDQUcsSUFBQUEsSUFBSSxFQUFFLGNBQUNGLE1BQUQsU0FBa0I7QUFBQSxVQUFSVCxFQUFRLFNBQVJBLEVBQVE7QUFDdEIsYUFBT0QsTUFBSyxDQUFDQyxFQUFELENBQVo7QUFDRCxLQWJJO0FBY0w7QUFDQUUsSUFBQUEsUUFBUSxFQUFFLG9CQUFNO0FBQ2QsYUFBT0ksTUFBTSxDQUFDQyxNQUFQLENBQWNMLFNBQWQsQ0FBUDtBQUNELEtBakJJO0FBa0JMO0FBQ0FVLElBQUFBLE9BQU8sRUFBRSxpQkFBQ0gsTUFBRCxTQUFvQjtBQUFBLFVBQVRULEVBQVMsU0FBVEEsRUFBUztBQUMzQixhQUFPRSxTQUFRLENBQUNGLEVBQUQsQ0FBZjtBQUNEO0FBckJJLEdBRlMsQ0EwQmhCO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBekNnQixDQUFsQixDLENBMkNBOztBQUNBLElBQU1hLE1BQU0sR0FBRyxJQUFJQyxpQ0FBSixDQUFpQjtBQUM5QjtBQUNBQyxFQUFBQSxRQUFRLEVBQUVsQixNQUZvQjtBQUc5Qk8sRUFBQUEsU0FBUyxFQUFUQSxTQUg4QjtBQUk5QlksRUFBQUEsT0FBTyxFQUFFO0FBQ1BSLElBQUFBLEVBQUUsRUFBRVQsTUFBSyxDQUFDLENBQUQ7QUFERjtBQUpxQixDQUFqQixDQUFmLEMsQ0FRQTtBQUNBOztBQUNBYyxNQUFNLENBQUNJLGVBQVAsQ0FBdUI7QUFBRXJCLEVBQUFBLEdBQUcsRUFBSEEsR0FBRjtBQUFPc0IsRUFBQUEsSUFBSSxFQUFFO0FBQWIsQ0FBdkIsRSxDQUNBOztBQUNBdEIsR0FBRyxDQUFDdUIsTUFBSixDQUFXO0FBQUVDLEVBQUFBLElBQUksRUFBRTtBQUFSLENBQVgsRUFBMkIsWUFBTTtBQUMvQjtBQUNBL0IsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0RBQVo7QUFDRCxDQUhELEUsQ0FJQTs7QUFDQU0sR0FBRyxDQUFDeUIsR0FBSixDQUFRLHVCQUFSIiwic291cmNlUm9vdCI6Ii9ob21lL3BhbmRhaG9tZS9CZWNvZGUvdGVzdF9wXzEvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiLy9DZXR0ZSBpbXBvcnQgcGVybWV0IGRlIG1hbmlwdWxlciBkZXMgZG9zc2llciBkZXB1aXMgbGUgLmVudiBhdmVjIGxlIGZpY2hpZXIganMoIFZvaXIgQ29tbWVudCAxKVxuaW1wb3J0ICdkb3RlbnYvY29uZmlnJztcbi8vIE9uIGltcG9ydGUgbGEgZm9uY3Rpb24gaGkgZGVwdWlzIGxlIGZpY2hpZXIgcGFnZV8xIFxuaW1wb3J0IGhpIGZyb20gXCIuL3BhZ2VfMS5qc1wiIDtcbi8vRXhwcmVzcyBlc3QgdW4gZnJhbWV3b3JrIHF1aSBwZXJtZXQgZGUgZ2VyZXIgZGVzIHNlcnZldXJzLiBPbiBsJ3V0aWxpc2UgaWNpIGF2ZWMgYXBvbGxvLiBcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuLy9BcG9sbG8gc2VydmV1ciBlc3QgdW4gZnJhbWV3b3JrIHBlcm1ldGFubnQgZGUgY3JlZXIgZXQgZ2VyZXIgZGVzIGJhc2VzIGRlIGRvbm7DqWUgYXZlYyBncmFwaHFsXG5pbXBvcnQgeyBBcG9sbG9TZXJ2ZXIsIGdxbCB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZXhwcmVzcyc7XG4vL05vdXMgcGVybWV0IGQnYWNjZXBldGVyIHBsdXNpZXVyIGRlbWFuZGUgZGUgcGx1c2lldXIgc291cmNlcy5cbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuLy8xIC4gT24gYWZmY2loZSBkYW5zIGxhIGNvbnNvbGUgdW5lIHZhbGV1ciBzdG9ja8OpZSBkYW5zIGxlIC5lbnZcbmNvbnNvbGUubG9nKHByb2Nlc3MuZW52Lk1ZX1NFQ1JFVCk7XG4vLyBPbiBhcHBlbGxlIG5vdHJlIGZvbmN0aW9uIChcImNvbmNvbGUgbG9nIGRlcHVpcyBsZSBmaWNoaWVyIHBhZ2UgMVwiKVxubGV0IG1zZyA9IHJlcXVpcmUoXCIuL3BhZ2VfMS5qc1wiKTtcblxuXG5cbi8vIE9uIGxhbmNlIGxlIHNlcnZldXIgZXhwcmVzcyBlbiBsJ2luaXRhbGlzYW50IGRhbnMgdW5lIGNvbnN0YW50ZVxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuLy8gT24gY29uc3RydWl0IGljaSBsZSBzY2hlbWEgZGUgbm90cmUgXCJiYXNlIGRlIGRvbm7DqWVcIlxuLy9MZSBzY2hlbWEgZXN0IHVuIGxpc3RlIGRlIGRlZmluaXRpb25zIGRlIHR5cGUuIE9uIGNvbW1lbmNlIHBhciBsZSB0eXBlIFF1ZXJ5IHB1aXMgb24gcmVtcGxpcyBsZXMgZGlmZmVyZW50cyBjaGFtcHMoVXNlcixNZXNzYWdlKSBkZSBsYSBEQlxuLy9ncWzCtC4uLmAgZXN0IGxlIGZvcm1hdCBHcmFwaFFsIGRlIERCXG4vL1BvdXIgbGUgcHJlbWllciBcInVzZXJzIDogW1VzZXIhXVwiIE9uIGNyZWUgdW4gdHlwZSB1c2VycyBxdWUgdG91cyBsZXMgdXNlcnMgcG9zc2VkZSBwYXIgZGVmYXV0IGV0IHF1aSBlc3Qgb2JsaWdhdG9pcmVcbi8vUG91ciBsZSBzZWNvbmQgXCJtZSA6VXNlclwiIE9uIGRlZmluaXMgdW4gb2JqZXQgbWUgZGUgdHlwZXIgVXNlci4gRGFucyBjZSBjYSBpbCBhIGxlIFwic2NhbGFyIHR5cGUoY2hhbXAgY2xhc3NpcXVlKVwiIHVzZXJuYW1lKHN0cmluZykgZXQgaWQoSUQpXG4vLychJyB2ZXV0IGRpcmUgcXVlIGNlcyBjaGFtcHMgbmUgcGV1dmVudCBwYXMgZXRyZSBudWxsIFxuLy8gTWVzc2FnZSBcbmNvbnN0IHNjaGVtYSA9IGdxbGBcbiAgdHlwZSBRdWVyeSB7XG4gICAgdXNlcnM6IFtVc2VyIV1cbiAgICBtZTogVXNlclxuICAgIHVzZXIoaWQgOiBJRCEpIDogVXNlclxuXG4gICAgbWVzc2FnZXM6IFtNZXNzYWdlIV0hXG4gICAgbWVzc2FnZShpZDogSUQhKTogTWVzc2FnZSFcbiAgfVxuICB0eXBlIFVzZXIge1xuICAgIHVzZXJuYW1lOiBTdHJpbmchXG4gICAgaWQgOklEIVxuICB9XG4gIHR5cGUgTWVzc2FnZXtcbiAgICBpZDogSUQhXG4gICAgdGV4dDogU3RyaW5nIVxuICB9XG5gO1xuLy9Vc2VyIGVzdCB1bmUgdGFibGUgcXVpIGVzdCBjb21wb3PDqWUgZGVzIGNoYW1wIElkIGV0IHVzZXJuYW1cbmxldCB1c2VycyA9IHtcbiAgMToge1xuICAgIGlkOiAnMScsXG4gICAgdXNlcm5hbWU6ICdSb2JpbiBXaWVydWNoJyxcbiAgfSxcbiAgMjoge1xuICAgIGlkOiAnMicsXG4gICAgdXNlcm5hbWU6ICdEYXZlIERhdmlkcycsXG4gIH0sXG59O1xuLy9tZXNzYWdlIGVzdCB1bmUgdGFibGUgcXVpIGVzdCBjb21wb3PDqWUgZGVzIGNoYW1wIElkIGV0IHVzZXJuYW1cbmxldCBtZXNzYWdlcyA9IHtcbiAgMToge1xuICAgIGlkOiAnMScsXG4gICAgdGV4dDogJ0hlbGxvIFdvcmxkJyxcbiAgfSxcbiAgMjoge1xuICAgIGlkOiAnMicsXG4gICAgdGV4dDogJ0J5IFdvcmxkJyxcbiAgfSxcbn07XG4vLyBPbiBkZWZlbmlzIHVuZSB2YXJpYWJsZSBcIm1lXCIgcXVpIHByZW5kIGNvbW1lIGNoYW1wIGxlIHByZW1pZXIgdXNlciBjb21tZSBjaGFtcFxuLy9jb25zdCBtZSA9IHVzZXJzWzFdOyBQbHVzIGJlc29pbiBkZSBsJ3V0aWxpc2VyIGNhciBpbCBlc3QgaW5pdCBkYW5zIGwnYXJndW1lbnQgY29udGV4dGUoM2VtZSBhcmd1bWVudCkgZGUgQXBvbGxvIHNlcnZldXIgXG4vLyBMZSByZXNvbHZlcnMgcGVybWV0IGQnYWxsZXIgY2hlcmNoZXIgbGVzIGRvbm7DqWUgZGFucyBsYSBEQiBjJ2VzdCBpY2kgcXVlIHRvdXMgbGVzIHF1ZXJ5IGRldnJvbnQgZXRyZSBlZmZlY3R1w6llXG5jb25zdCByZXNvbHZlcnMgPSB7XG5cbiAgUXVlcnk6IHtcbiAgICAvLyBPbiByZW52b2llIGwnZW5zZW1ibGUgZGVzIGRvbm7DqWUgZGUgbGEgdGFibGUgdXNlcnMgXG4gICAgdXNlcnM6ICgpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHVzZXJzKTtcbiAgICB9LFxuICAgIC8vIE9uIHJlbnZvaWUgdG91dGVzIGxlcyBkb25uw6llcyBkZSAnbWUnXG4gICAgLy8gTGUgMyBlbWUgJ21lJyBhcmd1bWVudCB2aWVucyBkZSBjb250ZXh0LlxuICAgIG1lOiAocGFyZW50LCBhcmdzLCB7IG1lIH0pID0+IHtcbiAgICAgIHJldHVybiBtZTtcbiAgICB9LFxuICAgIC8vT24gcmVudm9pZSBsZXMgZG9ubsOpZSBkJ3VuIHVzZXIgY2libMOpIGVuIGZvbmN0aW9uIGRlIHNvbiBJRFxuICAgIHVzZXI6IChwYXJlbnQsIHtpZH0pID0+IHtcbiAgICAgIHJldHVybiB1c2Vyc1tpZF07XG4gICAgfSxcbiAgICAvL09uIHJlbnZvaWUgbCdlbnNlbWJsZSBkZXMgZG9ubsOpZSBkZSBsYSB0YWJsZSBtZXNzYWdlXG4gICAgbWVzc2FnZXM6ICgpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKG1lc3NhZ2VzKTtcbiAgICB9LFxuICAgIC8vT24gcmVudm9pZSBsZXMgZG9ubsOpZSBkJ3VuIG1lc3NhZ2UgY2libMOpIGVuIGZvbmN0aW9uIGRlIHNvbiBJRFxuICAgIG1lc3NhZ2U6IChwYXJlbnQsIHsgaWQgfSkgPT4ge1xuICAgICAgcmV0dXJuIG1lc3NhZ2VzW2lkXTtcbiAgICB9LFxuICB9LFxuICBcbiAgLy8gSWNpIG9uIGltcG9zZSBhIHRvdXMgbGVzIHVzZXJuYW1lcyBsYSB2YWxldXIgJ0hhbnMnXG4gIC8vIFVzZXI6IHtcbiAgLy8gICAgIHVzZXJuYW1lOiAoKSA9PiAnSGFucycsXG4gIC8vIH0sXG5cbiAgLy9JY2kgb24gcmVudm9pZSBsZSBwYXJlbnQgZGUgdXNlcm5hbWUgbG9yc3F1ZSBsJ29uIGRlbWFuZGUgbGUgdXNlcm5hbWUocmVkb25kYW50KVxuICAvLyBVc2VyOiB7XG4gIC8vICAgdXNlcm5hbWU6IHBhcmVudCA9PiB7XG4gIC8vICAgICByZXR1cm4gcGFyZW50LnVzZXJuYW1lO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vT24gZGVmaW5pcyBpY2kgYSB1c2VybmFtZSB1biBub20gZXQgcHJlbm9tXG4gIC8vIFVzZXI6IHtcbiAgLy8gICB1c2VybmFtZTogdXNlciA9PiBgJHt1c2VyLmZpcnN0bmFtZX0gJHt1c2VyLmxhc3RuYW1lfWAsXG4gIC8vIH0sXG59O1xuLy9PbiBsYW5jZSBsZSBzZXJ2ZXVyIEFwb2xsb1xuY29uc3Qgc2VydmVyID0gbmV3IEFwb2xsb1NlcnZlcih7XG4gIC8vIERlZmluaXRpb25zIGRlcyB0eXBlcyAtPiBzY2hlbWEgZXQgcmVxdWV0ZSBmYWl0ZSBhdmVjIHJlc29sdmVyc1xuICB0eXBlRGVmczogc2NoZW1hLFxuICByZXNvbHZlcnMsXG4gIGNvbnRleHQ6IHtcbiAgICBtZTogdXNlcnNbMV0sXG4gIH0sXG59KTtcbi8vT24gdXRpbGlzZSBpY2kgJ2FwcGx5TWlkZGxld2FyZScgcG91ciBsYW5jZXIgZXhwcmVzcyBhdmVjIGxlIHNlcnZldXIgYXBwb2xsbyBwb3VyIGxhbmNlciBHcmFwaHFsIHBsYXlncm91bmRcbi8vT24gbGFuY2UgZGFucyBsZSBuYXZpZ2F0ZXVyIGxvY2FsaG9zdDo4MDAwL2dyYXBocWwgcG91ciBhY2NlZGVyIGEgbGEgcGFnZSBkZSBncmFwaHFsIHBsYXlncm91bmRcbnNlcnZlci5hcHBseU1pZGRsZXdhcmUoeyBhcHAsIHBhdGg6ICcvZ3JhcGhxbCcgfSk7XG4vL09uIGxhbmNlIG5vdHJlIHBhZ2Ugc3VyIGxlIHBvcnQgODAwMFxuYXBwLmxpc3Rlbih7IHBvcnQ6IDgwMDAgfSwgKCkgPT4ge1xuICAvL01lc3NhZ2UgZCdhZmZpY2hhZ2UgbG9yc3F1ZSBsZSBzZXJ2ZXVyIGVzdCBlbiBsaWduZVxuICBjb25zb2xlLmxvZygnQXBvbGxvIFNlcnZlciBvbiBodHRwOi8vbG9jYWxob3N0OjgwMDAvZ3JhcGhxbCcpO1xufSk7XG4vL0xhbmNlbWVudCBkZSBjb3JzXG5hcHAudXNlKGNvcnMoKSk7XG5cblxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "console",
        "log",
        "process",
        "env",
        "MY_SECRET",
        "msg",
        "require",
        "app",
        "schema",
        "gql",
        "users",
        "id",
        "username",
        "messages",
        "text",
        "resolvers",
        "Query",
        "Object",
        "values",
        "me",
        "parent",
        "args",
        "user",
        "message",
        "server",
        "ApolloServer",
        "typeDefs",
        "context",
        "applyMiddleware",
        "path",
        "listen",
        "port",
        "use"
      ],
      "mappings": ";;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;;AACA;AACAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,SAAxB,E,CACA;;AACA,IAAIC,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAjB,C,CAIA;;;AACA,IAAMC,GAAG,GAAG,0BAAZ,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,MAAM,OAAGC,wBAAH,oBAAZ,C,CAkBA;;AACA,IAAIC,MAAK,GAAG;AACV,KAAG;AACDC,IAAAA,EAAE,EAAE,GADH;AAEDC,IAAAA,QAAQ,EAAE;AAFT,GADO;AAKV,KAAG;AACDD,IAAAA,EAAE,EAAE,GADH;AAEDC,IAAAA,QAAQ,EAAE;AAFT;AALO,CAAZ,C,CAUA;;AACA,IAAIC,SAAQ,GAAG;AACb,KAAG;AACDF,IAAAA,EAAE,EAAE,GADH;AAEDG,IAAAA,IAAI,EAAE;AAFL,GADU;AAKb,KAAG;AACDH,IAAAA,EAAE,EAAE,GADH;AAEDG,IAAAA,IAAI,EAAE;AAFL;AALU,CAAf,C,CAUA;AACA;AACA;;AACA,IAAMC,SAAS,GAAG;AAEhBC,EAAAA,KAAK,EAAE;AACL;AACAN,IAAAA,KAAK,EAAE,iBAAM;AACX,aAAOO,MAAM,CAACC,MAAP,CAAcR,MAAd,CAAP;AACD,KAJI;AAKL;AACA;AACAS,IAAAA,EAAE,EAAE,YAACC,MAAD,EAASC,IAAT,QAA0B;AAAA,UAATF,GAAS,QAATA,EAAS;AAC5B,aAAOA,GAAP;AACD,KATI;AAUL;AACAG,IAAAA,IAAI,EAAE,cAACF,MAAD,SAAkB;AAAA,UAART,EAAQ,SAARA,EAAQ;AACtB,aAAOD,MAAK,CAACC,EAAD,CAAZ;AACD,KAbI;AAcL;AACAE,IAAAA,QAAQ,EAAE,oBAAM;AACd,aAAOI,MAAM,CAACC,MAAP,CAAcL,SAAd,CAAP;AACD,KAjBI;AAkBL;AACAU,IAAAA,OAAO,EAAE,iBAACH,MAAD,SAAoB;AAAA,UAATT,EAAS,SAATA,EAAS;AAC3B,aAAOE,SAAQ,CAACF,EAAD,CAAf;AACD;AArBI,GAFS,CA0BhB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAzCgB,CAAlB,C,CA2CA;;AACA,IAAMa,MAAM,GAAG,IAAIC,iCAAJ,CAAiB;AAC9B;AACAC,EAAAA,QAAQ,EAAElB,MAFoB;AAG9BO,EAAAA,SAAS,EAATA,SAH8B;AAI9BY,EAAAA,OAAO,EAAE;AACPR,IAAAA,EAAE,EAAET,MAAK,CAAC,CAAD;AADF;AAJqB,CAAjB,CAAf,C,CAQA;AACA;;AACAc,MAAM,CAACI,eAAP,CAAuB;AAAErB,EAAAA,GAAG,EAAHA,GAAF;AAAOsB,EAAAA,IAAI,EAAE;AAAb,CAAvB,E,CACA;;AACAtB,GAAG,CAACuB,MAAJ,CAAW;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAX,EAA2B,YAAM;AAC/B;AACA/B,EAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACD,CAHD,E,CAIA;;AACAM,GAAG,CAACyB,GAAJ,CAAQ,uBAAR",
      "sourceRoot": "/home/pandahome/Becode/test_p_1/src",
      "sourcesContent": [
        "//Cette import permet de manipuler des dossier depuis le .env avec le fichier js( Voir Comment 1)\nimport 'dotenv/config';\n// On importe la fonction hi depuis le fichier page_1 \nimport hi from \"./page_1.js\" ;\n//Express est un framework qui permet de gerer des serveurs. On l'utilise ici avec apollo. \nimport express from 'express';\n//Apollo serveur est un framework permetannt de creer et gerer des bases de donnée avec graphql\nimport { ApolloServer, gql } from 'apollo-server-express';\n//Nous permet d'accepeter plusieur demande de plusieur sources.\nimport cors from 'cors';\n//1 . On affcihe dans la console une valeur stockée dans le .env\nconsole.log(process.env.MY_SECRET);\n// On appelle notre fonction (\"concole log depuis le fichier page 1\")\nlet msg = require(\"./page_1.js\");\n\n\n\n// On lance le serveur express en l'initalisant dans une constante\nconst app = express();\n// On construit ici le schema de notre \"base de donnée\"\n//Le schema est un liste de definitions de type. On commence par le type Query puis on remplis les differents champs(User,Message) de la DB\n//gql´...` est le format GraphQl de DB\n//Pour le premier \"users : [User!]\" On cree un type users que tous les users possede par defaut et qui est obligatoire\n//Pour le second \"me :User\" On definis un objet me de typer User. Dans ce ca il a le \"scalar type(champ classique)\" username(string) et id(ID)\n//'!' veut dire que ces champs ne peuvent pas etre null \n// Message \nconst schema = gql`\n  type Query {\n    users: [User!]\n    me: User\n    user(id : ID!) : User\n\n    messages: [Message!]!\n    message(id: ID!): Message!\n  }\n  type User {\n    username: String!\n    id :ID!\n  }\n  type Message{\n    id: ID!\n    text: String!\n  }\n`;\n//User est une table qui est composée des champ Id et usernam\nlet users = {\n  1: {\n    id: '1',\n    username: 'Robin Wieruch',\n  },\n  2: {\n    id: '2',\n    username: 'Dave Davids',\n  },\n};\n//message est une table qui est composée des champ Id et usernam\nlet messages = {\n  1: {\n    id: '1',\n    text: 'Hello World',\n  },\n  2: {\n    id: '2',\n    text: 'By World',\n  },\n};\n// On defenis une variable \"me\" qui prend comme champ le premier user comme champ\n//const me = users[1]; Plus besoin de l'utiliser car il est init dans l'argument contexte(3eme argument) de Apollo serveur \n// Le resolvers permet d'aller chercher les donnée dans la DB c'est ici que tous les query devront etre effectuée\nconst resolvers = {\n\n  Query: {\n    // On renvoie l'ensemble des donnée de la table users \n    users: () => {\n      return Object.values(users);\n    },\n    // On renvoie toutes les données de 'me'\n    // Le 3 eme 'me' argument viens de context.\n    me: (parent, args, { me }) => {\n      return me;\n    },\n    //On renvoie les donnée d'un user ciblé en fonction de son ID\n    user: (parent, {id}) => {\n      return users[id];\n    },\n    //On renvoie l'ensemble des donnée de la table message\n    messages: () => {\n      return Object.values(messages);\n    },\n    //On renvoie les donnée d'un message ciblé en fonction de son ID\n    message: (parent, { id }) => {\n      return messages[id];\n    },\n  },\n  \n  // Ici on impose a tous les usernames la valeur 'Hans'\n  // User: {\n  //     username: () => 'Hans',\n  // },\n\n  //Ici on renvoie le parent de username lorsque l'on demande le username(redondant)\n  // User: {\n  //   username: parent => {\n  //     return parent.username;\n  //   }\n  // }\n\n  //On definis ici a username un nom et prenom\n  // User: {\n  //   username: user => `${user.firstname} ${user.lastname}`,\n  // },\n};\n//On lance le serveur Apollo\nconst server = new ApolloServer({\n  // Definitions des types -> schema et requete faite avec resolvers\n  typeDefs: schema,\n  resolvers,\n  context: {\n    me: users[1],\n  },\n});\n//On utilise ici 'applyMiddleware' pour lancer express avec le serveur appollo pour lancer Graphql playground\n//On lance dans le navigateur localhost:8000/graphql pour acceder a la page de graphql playground\nserver.applyMiddleware({ app, path: '/graphql' });\n//On lance notre page sur le port 8000\napp.listen({ port: 8000 }, () => {\n  //Message d'affichage lorsque le serveur est en ligne\n  console.log('Apollo Server on http://localhost:8000/graphql');\n});\n//Lancement de cors\napp.use(cors());\n\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1577572393213
  },
  "{\"sourceRoot\":\"/home/pandahome/Becode/test_p_1/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/pandahome/Becode/test_p_1\",\"filename\":\"/home/pandahome/Becode/test_p_1/src/page_1.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/pandahome/Becode/test_p_1\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.7": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/pandahome/Becode/test_p_1/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/pandahome/Becode/test_p_1",
      "filename": "/home/pandahome/Becode/test_p_1/src/page_1.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/pandahome/Becode/test_p_1",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/pandahome/Becode/test_p_1/src/page_1.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/pandahome/Becode/test_p_1/src/page_1.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/pandahome/Becode/test_p_1/src",
        "sourceFileName": "page_1.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar hi = function hi() {\n  console.log(\"Hey je suis de la page 1\");\n};\n\nmodule[\"export\"] = hi();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VfMS5qcyJdLCJuYW1lcyI6WyJoaSIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsRUFBRSxHQUFHLFNBQUxBLEVBQUssR0FBVTtBQUNqQkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksMEJBQVo7QUFDSCxDQUZEOztBQUdBQyxNQUFNLFVBQU4sR0FBZ0JILEVBQUUsRUFBbEIiLCJzb3VyY2VSb290IjoiL2hvbWUvcGFuZGFob21lL0JlY29kZS90ZXN0X3BfMS9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoaSA9IGZ1bmN0aW9uKCl7XG4gICAgY29uc29sZS5sb2coXCJIZXkgamUgc3VpcyBkZSBsYSBwYWdlIDFcIik7XG59XG5tb2R1bGUuZXhwb3J0ID0gaGkoKSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "page_1.js"
      ],
      "names": [
        "hi",
        "console",
        "log",
        "module"
      ],
      "mappings": ";;AAAA,IAAMA,EAAE,GAAG,SAALA,EAAK,GAAU;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH,CAFD;;AAGAC,MAAM,UAAN,GAAgBH,EAAE,EAAlB",
      "sourceRoot": "/home/pandahome/Becode/test_p_1/src",
      "sourcesContent": [
        "const hi = function(){\n    console.log(\"Hey je suis de la page 1\");\n}\nmodule.export = hi()"
      ]
    },
    "sourceType": "script",
    "mtime": 1577551098950
  }
}